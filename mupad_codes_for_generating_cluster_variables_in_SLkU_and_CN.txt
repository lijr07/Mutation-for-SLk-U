// some functions

IsPartition1GreaterThanOrEqualPartition2:=proc(p1,p2) // p1,p2 are partitions
local i,j,k,t1,t2,r,n,l1,l2;
begin

l1:=p1;
l2:=p2;

n:=max(lengthOfList(p1), lengthOfList(p2));
for i from lengthOfList(p1) to n do
l1:=append(l1,0);
end_for;
for i from lengthOfList(p2) to n do
l2:=append(l2,0);
end_for;

r:=1; // p1 >= p2

for i from 1 to n do
t1:=0;
t2:=0;
for j from 1 to i do
t1:=t1+l1[j];
t2:=t2+l2[j];
end_for;
if t1<t2 then
r:=0; // p1 is not greater or equal to p2
break;
end_if;
end_for;

return(r);
end_proc:

comparePartitions:=proc(p1,p2) // p1,p2 are partitions
local i,j,k,t1,t2,r,n,l1,l2;
begin

t1:=IsPartition1GreaterThanOrEqualPartition2(p1,p2);
t2:=IsPartition1GreaterThanOrEqualPartition2(p2,p1);

if t1=1 then 
r:=1;  // p1>=p2
else if t2=1 then
r:=-1; // p1<=p2
else
r:=0; // not comparable
end_if;
end_if;

return(r);
end_proc:

TableauRestrictToElementsLessOrEqualA:=proc(P,a)
local i,j,k,t1,t2,r,n;
begin


r:=[];
for i in P do
t1:=[];
for j in i do
if j<=a then
t1:=append(t1,j);
end_if;
end_for:
r:=append(r,t1);
end_for:

return(r);
end_proc:

matrixMutation:=proc(mat,  k)  // mutate at k
local mat2, i, j, size;
begin
size:=linalg::matdim(mat)[1];

  mat2:=mat;
 for i from 1 to size do
     for j from 1 to size do
       
               if (k=i or k=j) then
               
                       mat2[i,j]:=-mat[i, j];
              
               else 
               
                   mat2[i, j] := mat[i, j]+1/2*(abs(mat[i,k])*mat[k,j]+mat[i,k]*abs(mat[k,j]));
               end_if;
               
       
     end_for;
end_for;
return(mat2);
end_proc:

Mod:=proc(a,n)
local i,r;
begin

if(a mod n <>0) then
r:=a mod n;
else
r:=n;
end_if;

return(r);
end_proc:

RandomPermutation:=proc(array)
local i,j,r,r1,r2,t1,t2,n,k;
begin

n:=lengthOfList(array);

r:=array;

if n>1 then

for i from n downto 2 do
r1:=random() $ k=1..n;
j:=Mod(r1*(i+1),n);
//print(j);
t1:=r[j];
r[j]:=r[i];
r[i]:=t1;
end_for:

end_if;

return(r);
end_proc:


removeDuplicates:=proc(l)
local i,r;
begin
 
r:=[];
for i in l do
if(IsInList(i,r)=0) then
r:=append(r,i);
end_if;
end_for;

return(r);
end_proc:


TableauDivision:=proc(a,b)
local i,j,k,r,t1,t2,r1,r2,n;
begin

//print("a,b",a,b);

if a=[] and b=[] then
r:=[];
else

t1:=TableauToMatrix(a);
t2:=TableauToMatrix(b);

r1:=MatrixTakeRows(t1);
r2:=MatrixTakeRows(t2);

n:=lengthOfList(r1);
for i from lengthOfList(r2) to n do
r2:=append(r2, []);
end_for:

r3:=[];
for i from 1 to lengthOfList(r1) do
r3:=append(r3, sort(SetDifferenceListDifference(r1[i],r2[i])));
end_for;

r:=[];
for i from 1 to lengthOfList(r3[1]) do
t1:=[];
for j from 1 to lengthOfList(r3) do
if r3[j][i]<>10000 then
t1:=append(t1, r3[j][i]);
end_if;
end_for;
r:=append(r,t1);
end_for;

end_if;

return(r);
end_proc:

MatrixTakeRows:=proc(a) 
local i,j,k,t1,t2,r,n,m;
begin

n:=linalg::matdim(a)[1];
m:=linalg::matdim(a)[2];

r:=[];
for i from 1 to n do
t1:=linalg::submatrix(a, [i], ListAToN(1,m));
t2:=[];
for j from 1 to m do
t2:=append(t2,t1[1,j]);
end_for;
r:=append(r, t2);
end_for:

return(r);
end_proc:

SetDifference:=proc(A,B) // A-B
local i,j,r,n,m;
begin

r:=[];
for i in A do
if(IsInList(i,B)=0) then
r:=append(r,i);
end_if;
end_for;

return(r);
end_proc:


SetDifferenceListDifference:=proc(A,B) // A-B, can have duplicate elements
local i,j,r,n,m,r1,r2,t1,t2;
begin

r:=[];
r1:=removeDuplicates(A);
for i in r1 do
t1:=NumberOfA(A,i)-NumberOfA(B,i);
for j from 1 to t1 do
r:=append(r, i);
end_for;
end_for;

return(r);
end_proc:

NumberOfA:=proc(l,a) 
local i,j,r;
begin
 
r:=0;
for i in l do
if(i=a) then
r:=r+1;
end_if;
end_for;
 
return(r);
end_proc:

UnionOfLists:=proc(l1,l2)
local i,r;
begin
r:=l1;
for i in l2 do 
r:=append(r,i);
end_for;
return(r);
end_proc:

UnionOfListsManyLists:=proc(l)
local i,r;
begin
r:=[];
for i in l do 
r:=UnionOfLists(r,i);
end_for;
return(r);
end_proc:

IsInList:=proc(i, l)
local r, j;
begin 
r:=0;
for j in l do
if (i=j) then
r:=1;
break;
end_if;
end_for;

return(r);
end_proc:

UnionOfTwoTableaux:=proc(a,b)
local i,j,k,r,t1,t2,r1,r2,r3;
begin

t1:=UnionOfLists(a,b);
t2:=TableauToMatrix(t1);

//print(t1,t2);

r:=[];
for i from 1 to linalg::matdim(t2)[1] do
r1:=[];
for j from 1 to linalg::matdim(t2)[2] do
r1:=append(r1, t2[i,j]);
end_for;
r:=append(r, sort(r1));
end_for;

r2:=TableauToMatrix(r);
r:=[];
for i from 1 to linalg::matdim(r2)[1] do
r1:=[];
for j from 1 to linalg::matdim(r2)[2] do
if r2[i,j]<>10000 then
r1:=append(r1, r2[i,j]);
end_if;
end_for;
r:=append(r, sort(r1));
end_for;

return(r);
end_proc:

PowerOfTableaux:=proc(a,n)
local i,j,k,r,t1,t2,r1,r2,r3;
begin


r:=[];

if a<>[] and a<>[[]] then
for i from 1 to n do
r:=UnionOfTwoTableaux(r,a);
end_for;
else
r:=a;
end_if;

return(r);
end_proc:

lengthOfList:=proc(l)
local i, r;
begin
r:=0;
for i in l do
r:=r+1;
end_for;

return(r);
end_proc:

ListAToN:=proc(a,n)  
local i,j,r,m,t1,h;
begin

r:=[];
for i from a to n do
r:=append(r, i);
end_for;

return(r);
end_proc:

TableauToMatrix:=proc(a) 
local i,j,k,t1,t2,r,n,m;
begin

m:=lengthOfList(a);

n:=0;
for i in a do
t1:=lengthOfList(i);
if n<t1 then
n:=t1;
end_if;
end_for;

r:=matrix(n,m);

for i from 1 to n do
for j from 1 to m do
if i<=lengthOfList(a[j]) then
r[i,j]:=a[j][i];
else
r[i,j]:=10000;
end_if;
end_for;
end_for;


return(r);
end_proc:

IsTableauxP1GreaterEqualP2SLkU:=proc(P1,P2) // P1,P2 are tableaux
local i,j,k,t1,t2,r1,r2,r,n,a;
begin

n:=-1000;
for i in UnionOfListsManyLists(P1) do
if n<i then
n:=i;
end_if;
end_for:
for i in UnionOfListsManyLists(P2) do
if n<i then
n:=i;
end_if;
end_for:

r:=1; // P1>=P2

for a from 1 to n do
t1:=TableauRestrictToElementsLessOrEqualAToPartition(P1,a);
t2:=TableauRestrictToElementsLessOrEqualAToPartition(P2,a);
r1:=comparePartitions(t1,t2);
if r1=0 or r1=-1 then
r:=0; // P1 is not greater or equal to P2
break;
end_if;
end_for;

return(r);
end_proc:

TableauToPartition:=proc(P)
local i,j,k,t1,t2,r,n;
begin


r:=[];
t1:=TableauToMatrix(P);
for i from 1 to linalg::matdim(t1)[1] do
t2:=0;
for j from 1 to linalg::matdim(t1)[2] do
if t1[i,j]<>10000 then
t2:=t2+1;
end_if;
end_for;
r:=append(r, t2);
end_for;

return(r);
end_proc:


TableauRestrictToElementsLessOrEqualAToPartition:=proc(P,a)
local i,j,k,t1,t2,r,n;
begin

t1:=TableauRestrictToElementsLessOrEqualA(P,a);
r:=TableauToPartition(t1);

return(r);
end_proc:

compareWeightsTableauxSLkU:=proc(P1,P2) // P1,P2 are tableaux
local i,j,k,t1,t2,r1,r2,r,n,a;
begin

t1:=IsTableauxP1GreaterEqualP2SLkU(P1,P2);
t2:=IsTableauxP1GreaterEqualP2SLkU(P2,P1);

if t1=1 then 
r:=1; // P1>=P2
else if t2=1 then
r:=-1 // P1<=P2
else
r:=0; // P1, P2 not comparable
end_if;
end_if;

return(r);
end_proc:

computeEquationsForModulesTableauxSLkU:=proc(variable2, mat, k) // variable2=(variables on quiver, cluster variables obtained so far), base affine space C[SL_k]^U
local i, r, newVariable, temp, newVariable2,newVariableP,newVariable2P, variable, variable1, size,w1,w2,t1,t2, clusterVariables, exchangeRelations, exch1,exch2,exch3,exch,
exchT1,exchT2,exchT3,exchT,verticesInInitial;
begin

variable1:=variable2[1];
clusterVariables:=variable2[2];
exchangeRelations:=variable2[3]; 

temp:=variable1[k][2];
size:=linalg::matdim(mat)[1];

newVariable:=[];
newVariable2:=[];
newVariableP:=1;
newVariableP2:=1;
variable:=variable1;

exch1:=[];
exch2:=[];
exch3:=[];
exchT1:=[];
exchT2:=[];
exchT3:=[];

for i from 1 to size do
   
      if(mat[i, k]>0)
      then

         newVariable:= UnionOfTwoTableaux( newVariable, PowerOfTableaux(variable[i][2], mat[i,k]) );
//print( TableauToMatrix(variable[i][2]), "*");

exch1:=append(exch1,  TableauToMatrix(PowerOfTableaux(variable[i][2], mat[i,k])));
exchT1:=UnionOfTwoTableaux(exchT1, PowerOfTableaux(variable[i][2], mat[i,k]));


      end_if;
end_for;

//print("+");

for i from 1 to size do

      if(mat[i, k]<0)
      then

         newVariable2:= UnionOfTwoTableaux( newVariable2, PowerOfTableaux(variable[i][2], -mat[i,k]) );
//print( TableauToMatrix(variable[i][2]), "*");

exch2:=append(exch2,  TableauToMatrix(PowerOfTableaux(variable[i][2], -mat[i,k])));
exchT2:=UnionOfTwoTableaux(exchT2, PowerOfTableaux(variable[i][2], -mat[i,k]));


      end_if;
      
end_for;



variable[k][1]:=variable[k][1]+1;

t1:=compareWeightsTableauxSLkU(newVariable, newVariable2);

//print(t1,newVariable,newVariable2, TableauToMatrix(variable[k][2]));

if t1=1 then
variable[k][2]:=TableauDivision(newVariable, variable[k][2]);
else
variable[k][2]:=TableauDivision(newVariable2, variable[k][2]);
end_if;


t2:=TableauToMatrix(variable[k][2]);

exch3:=append(exch3, TableauToMatrix(temp));
exch3:=append(exch3, t2);


//print("=", TableauToMatrix(temp),"*", t2);

exch:=[exch3,exch1,exch2];
exchT:=[exch3,TableauToMatrix(exchT1),TableauToMatrix(exchT2)];

if IsInList(t2, clusterVariables)=0 then
clusterVariables:=append(clusterVariables, t2);

exchangeRelations:=append(exchangeRelations, exch);
exchangeRelations:=append(exchangeRelations, exchT);

end_if;

//print(exch);

r:=[variable, clusterVariables,exchangeRelations];

return(r);
end_proc:


// mutation of base affine space, C[SL_k]^U
typ:=1;
kk:=5;  // C[SL_kk]^U, also for C[N]

delete x;
A:=MatrixG2(x, kk, 100):

// quivers are from Keller's mutation app

if kk=2 then
mat:=matrix([[0,-1,1],[1,0,-1],[-1,1,0]]); // SL2
else if kk=3 then
mat:=matrix([[0,-1,1,0,0,0],[1,0,-1,-1,1,0],[-1,1,0,0,-1,1],[0,1,0,0,-1,0],[0,-1,1,1,0,-1],[0,0,-1,0,1,0]]); // SL3
else if kk=4 then
mat:=matrix([[0,-1,1,0,0,0,0,0,0,0],[1,0,-1,-1,1,0,0,0,0,0],[-1,1,0,0,-1,1,0,0,0,0],[0,1,0,0,-1,0,-1,1,0,0],[0,-1,1,1,0,-1,0,-1,1,0],[0,0,-1,0,1,0,0,0,-1,1],[0,0,0,1,0,0,0,-1,0,0],[0,0,0,-1,1,0,1,0,-1,0],[0,0,0,0,-1,1,0,1,0,-1],[0,0,0,0,0,-1,0,0,1,0]]); // SL4
else if kk=5 then
mat:=matrix([[0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,-1,-1,1,0,0,0,0,0,0,0,0,0,0],[-1,1,0,0,-1,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,-1,0,-1,1,0,0,0,0,0,0,0],[0,-1,1,1,0,-1,0,-1,1,0,0,0,0,0,0],[0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,0],[0,0,0,1,0,0,0,-1,0,0,-1,1,0,0,0],[0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0],[0,0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0],[0,0,0,0,0,-1,0,0,1,0,0,0,0,-1,1],[0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0],[0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0],[0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0],[0,0,0,0,0,0,0,0,-1,1,0,0,1,0,-1],[0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0]]); // SL5
else if kk=6 then
mat:=matrix([[0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,1,1,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0],[0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0],[0,0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,1,0,0,0,0,-1,1,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0,-1,1,0,0,0,0],[0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0],[0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0],[0,0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0]]); // SL6
else if kk=7 then
mat:=matrix([[0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,1,1,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1,0,0,0,0,-1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,1,0]]); // SL7
else if kk=8 then
mat:=matrix([[0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,1,1,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1,0]]); // SL8
else if kk=9 then
mat:=matrix([[0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,1,1,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0]]); // SL9
else if kk=10 then
mat:=matrix([[0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-1,1,1,0,-1,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-1,1,0,1,0,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,-1,0,0,1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,-1,1,0,0,1,0,-1,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,1,0,-1,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,1,0,-1,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,1,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,-1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,-1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,-1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,-1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,-1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,1,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,1,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,1,0,-1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,1,0,-1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,1,0,-1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,1,0,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,1,0]]); // SL10
end_if;
end_if;
end_if;
end_if;
end_if;
end_if;
end_if;
end_if;
end_if:
  
vertices0:=[]:
n:=kk;

for i from 1 to n do
for j from 1 to i do
t3:=ListAToN(j, j+n-i);
vertices0:=append(vertices0, t3);
end_for:
end_for:

vertices := []:
for i from 1 to lengthOfList(vertices0) do 
vertices := append(vertices, [0, createMinors(A, vertices0[i]), i]):
end_for: 

verticesTableaux := []: // Tableaux are represented by matrices
for i from 1 to lengthOfList(vertices0) do 
verticesTableaux := append(verticesTableaux, [0, [vertices0[i]], i]): // [vertices0[i]] is an one column tableau
end_for: 
 
delete x;
mat1 := mat:
clusterVariables:=[]:
exchangeRelations:=[]: 
vertices1 := [verticesTableaux, clusterVariables, exchangeRelations]: // vertices1[2] store cluster variables, vertices1[1] store variables on quiver

/*
// SL3^U
ll0:=[[5],[5],[5]]:
*/

/*
// SL4^U
ll0:=[[5,8,9],[5,9,8]]:
*/

/*
// SL5^U
ll0:=[[5,8,9,12,13,14],[5,9,8,13,12,14]]:
*/

/*
// SL6^U
ll0:=[[9, 18, 19, 13, 5, 17, 8, 20, 12, 14], [14, 17, 8, 12, 20, 5, 13, 19, 9, 18], [20, 14, 8, 9, 13, 17, 12, 18, 19, 5], [9, 18, 12, 14, 13, 5, 8, 20, 17, 19], [13, 5, 20, 18, 9, 17, 12, 19, 8, 14], [19, 17, 8, 5, 13, 9, 14, 20, 12, 18], [20, 18, 13, 19, 9, 14, 17, 8, 5, 12], [14, 19, 12, 8, 18, 17, 13, 20, 9, 5], [19, 18, 14, 12, 17, 5, 9, 20, 13, 8], [20, 12, 13, 8, 18, 17, 19, 5, 14, 9], [8, 9, 13, 17, 5, 14, 20, 18, 12, 19], [17, 19, 12, 8, 9, 20, 5, 14, 13, 18], [13, 19, 18, 9, 12, 20, 14, 5, 8, 17], [8, 17, 5, 9, 19, 12, 13, 20, 14, 18], [13, 20, 5, 14, 8, 12, 9, 17, 18, 19], [14, 19, 12, 13, 9, 5, 18, 17, 20, 8], [12, 13, 20, 5, 19, 18, 9, 17, 14, 8], [12, 20, 9, 19, 17, 8, 14, 5, 13, 18], [20, 14, 9, 18, 5, 8, 17, 19, 12, 13], [12, 17, 8, 20, 13, 9, 18, 19, 5, 14], [18, 5, 8, 19, 14, 13, 9, 12, 20, 17], [13, 18, 5, 14, 9, 8, 19, 17, 20, 12], [14, 17, 18, 20, 9, 19, 5, 8, 13, 12], [19, 20, 5, 13, 14, 9, 8, 12, 18, 17], [12, 20, 13, 8, 9, 19, 5, 14, 18, 17], [18, 8, 19, 12, 5, 14, 13, 17, 9, 20], [9, 17, 5, 8, 20, 13, 14, 18, 19, 12], [14, 9, 5, 20, 12, 19, 17, 8, 18, 13], [13, 8, 18, 5, 14, 19, 20, 9, 17, 12], [19, 13, 12, 18, 17, 8, 9, 20, 14, 5], [17, 18, 14, 20, 9, 8, 12, 19, 5, 13], [5, 20, 12, 9, 8, 17, 14, 19, 18, 13], [20, 19, 12, 18, 8, 9, 17, 14, 5, 13], [13, 8, 12, 19, 20, 9, 14, 5, 17, 18], [14, 19, 13, 9, 5, 8, 20, 17, 12, 18], [8, 5, 14, 13, 9, 19, 20, 17, 18, 12], [12, 5, 14, 19, 13, 20, 17, 8, 9, 18], [13, 19, 18, 5, 9, 8, 17, 12, 14, 20], [8, 17, 9, 18, 20, 5, 19, 12, 14, 13], [13, 19, 5, 20, 18, 8, 14, 12, 9, 17], [5, 17, 18, 12, 19, 14, 8, 9, 20, 13], [18, 19, 14, 9, 17, 12, 5, 20, 8, 13], [18, 5, 14, 13, 19, 8, 12, 17, 9, 20], [13, 19, 20, 5, 14, 8, 18, 12, 9, 17], [19, 20, 8, 14, 17, 18, 5, 13, 12, 9], [18, 12, 14, 8, 13, 5, 17, 9, 20, 19], [12, 5, 9, 14, 18, 8, 17, 19, 13, 20], [14, 19, 5, 8, 13, 9, 17, 18, 12, 20], [9, 18, 20, 5, 8, 12, 13, 14, 17, 19], [13, 18, 9, 14, 5, 20, 8, 17, 12, 19], [13, 8, 19, 17, 20, 5, 18, 12, 9, 14], [18, 12, 20, 17, 9, 8, 13, 14, 5, 19], [12, 20, 18, 13, 9, 8, 17, 14, 5, 19], [5, 19, 9, 8, 18, 20, 14, 17, 13, 12], [13, 18, 20, 19, 9, 14, 12, 17, 5, 8], [9, 18, 12, 13, 19, 5, 14, 8, 20, 17], [9, 18, 8, 14, 19, 17, 5, 20, 13, 12], [19, 8, 20, 5, 9, 14, 12, 17, 13, 18], [13, 9, 18, 17, 14, 12, 19, 8, 20, 5], [8, 18, 14, 19, 13, 20, 17, 12, 5, 9], [5, 17, 9, 18, 12, 20, 8, 13, 14, 19], [20, 12, 13, 14, 8, 18, 9, 17, 5, 19], [14, 5, 8, 18, 19, 17, 9, 13, 20, 12], [9, 19, 8, 13, 14, 18, 20, 17, 12, 5], [18, 12, 20, 9, 8, 17, 5, 19, 14, 13], [14, 13, 18, 12, 17, 9, 8, 5, 20, 19], [17, 20, 8, 19, 5, 9, 14, 12, 18, 13], [9, 12, 5, 13, 19, 8, 20, 18, 17, 14], [12, 13, 5, 17, 8, 20, 18, 9, 19, 14], [14, 20, 13, 17, 9, 5, 18, 8, 12, 19], [12, 18, 20, 13, 17, 19, 9, 14, 5, 8], [13, 9, 12, 8, 19, 14, 18, 17, 5, 20], [18, 20, 9, 5, 14, 13, 8, 19, 12, 17], [20, 13, 14, 5, 17, 18, 19, 8, 12, 9], [8, 12, 20, 19, 17, 9, 14, 18, 13, 5], [13, 17, 20, 19, 9, 12, 14, 8, 5, 18], [5, 13, 17, 18, 20, 9, 12, 8, 14, 19], [13, 12, 20, 8, 5, 14, 19, 9, 17, 18], [19, 20, 5, 18, 17, 8, 12, 9, 14, 13], [18, 5, 9, 12, 17, 8, 19, 20, 14, 13], [17, 9, 14, 18, 12, 5, 8, 20, 13, 19], [17, 9, 13, 19, 12, 20, 8, 5, 18, 14], [20, 13, 9, 17, 19, 5, 8, 18, 14, 12], [14, 17, 5, 20, 8, 12, 18, 19, 13, 9], [13, 12, 5, 8, 17, 9, 18, 19, 20, 14], [8, 19, 17, 18, 9, 13, 12, 20, 5, 14], [19, 13, 5, 8, 18, 14, 12, 9, 17, 20], [14, 17, 9, 13, 20, 18, 12, 19, 5, 8], [12, 20, 5, 13, 17, 19, 14, 8, 18, 9], [20, 8, 5, 13, 17, 18, 12, 9, 14, 19], [18, 13, 8, 14, 9, 12, 20, 17, 19, 5], [14, 19, 5, 18, 8, 17, 20, 9, 12, 13], [19, 9, 5, 18, 8, 17, 12, 14, 13, 20], [20, 9, 5, 14, 18, 8, 19, 13, 17, 12], [13, 9, 19, 5, 8, 17, 18, 14, 12, 20], [12, 18, 14, 13, 20, 5, 19, 9, 8, 17], [12, 8, 17, 20, 14, 9, 5, 13, 18, 19], [18, 9, 17, 12, 13, 5, 19, 20, 14, 8], [12, 5, 18, 19, 14, 8, 17, 9, 13, 20], [8, 14, 9, 20, 18, 13, 12, 5, 19, 17], [18, 13, 12, 9, 20, 17, 8, 14, 19, 5], [8, 14, 19, 9, 12, 17, 5, 20, 18, 13], [5, 14, 20, 8, 17, 9, 18, 12, 13, 19], [12, 8, 9, 19, 17, 13, 20, 14, 5, 18], [13, 14, 12, 5, 18, 9, 19, 20, 17, 8], [18, 12, 5, 13, 8, 9, 20, 19, 14, 17], [8, 17, 14, 19, 18, 20, 9, 5, 12, 13], [14, 12, 17, 9, 8, 19, 5, 20, 18, 13], [14, 5, 18, 17, 8, 13, 20, 19, 9, 12], [5, 17, 8, 19, 9, 12, 14, 18, 20, 13], [8, 9, 18, 12, 20, 13, 14, 19, 5, 17], [17, 8, 13, 19, 18, 14, 12, 20, 5, 9], [5, 20, 14, 17, 18, 12, 19, 9, 13, 8], [17, 14, 18, 8, 5, 20, 12, 13, 9, 19], [19, 9, 14, 20, 12, 5, 17, 8, 18, 13], [8, 13, 17, 18, 19, 20, 14, 12, 5, 9], [19, 8, 13, 18, 14, 9, 5, 12, 20, 17], [19, 14, 18, 20, 12, 13, 5, 17, 8, 9], [20, 14, 5, 18, 9, 17, 12, 19, 13, 8], [13, 17, 19, 12, 20, 9, 8, 14, 18, 5], [13, 19, 14, 12, 18, 8, 20, 17, 9, 5], [13, 18, 17, 20, 14, 8, 9, 5, 19, 12], [9, 17, 20, 19, 14, 5, 13, 12, 18, 8], [12, 8, 19, 17, 9, 20, 14, 5, 13, 18], [17, 18, 8, 19, 20, 12, 13, 9, 5, 14], [20, 9, 18, 13, 14, 5, 8, 19, 12, 17], [13, 18, 12, 14, 17, 19, 20, 8, 5, 9], [9, 20, 18, 17, 19, 14, 13, 12, 8, 5], [9, 17, 8, 19, 12, 5, 13, 18, 20, 14], [8, 20, 17, 13, 14, 12, 9, 19, 5, 18], [8, 19, 18, 5, 14, 9, 20, 12, 13, 17], [12, 8, 18, 9, 13, 17, 19, 14, 20, 5], [5, 13, 12, 20, 17, 8, 9, 18, 19, 14], [20, 9, 5, 8, 18, 19, 12, 14, 13, 17], [13, 14, 18, 19, 5, 8, 17, 20, 9, 12], [8, 18, 17, 5, 19, 13, 9, 20, 14, 12], [19, 20, 8, 13, 9, 17, 5, 12, 14, 18], [17, 19, 18, 12, 5, 14, 8, 9, 13, 20], [19, 18, 13, 12, 5, 9, 8, 17, 14, 20], [13, 18, 9, 14, 19, 12, 8, 17, 5, 20], [14, 9, 5, 13, 8, 19, 17, 12, 18, 20], [20, 19, 14, 18, 17, 5, 9, 13, 8, 12], [8, 14, 9, 19, 18, 20, 13, 5, 12, 17], [17, 20, 14, 18, 8, 13, 9, 5, 19, 12], [19, 12, 5, 9, 20, 14, 18, 13, 17, 8], [13, 19, 9, 18, 12, 14, 5, 20, 17, 8], [18, 13, 17, 19, 5, 12, 8, 9, 20, 14], [9, 13, 14, 17, 5, 12, 8, 18, 19, 20], [14, 8, 13, 5, 18, 20, 9, 17, 12, 19], [9, 17, 20, 19, 8, 12, 14, 18, 5, 13], [19, 8, 14, 17, 12, 9, 18, 20, 13, 5], [8, 13, 18, 17, 12, 9, 19, 20, 14, 5], [18, 8, 14, 17, 20, 19, 12, 9, 13, 5], [17, 5, 13, 20, 18, 8, 9, 12, 19, 14], [13, 17, 5, 18, 14, 9, 19, 8, 20, 12], [18, 13, 17, 20, 5, 8, 19, 9, 12, 14], [14, 8, 18, 5, 20, 13, 17, 9, 12, 19], [18, 19, 20, 8, 13, 14, 9, 5, 12, 17], [5, 18, 19, 14, 20, 17, 8, 9, 12, 13], [12, 14, 9, 18, 8, 13, 19, 20, 17, 5], [12, 14, 17, 9, 18, 5, 19, 20, 8, 13], [9, 18, 5, 12, 20, 17, 8, 19, 14, 13], [18, 8, 9, 12, 19, 5, 17, 20, 14, 13], [9, 8, 14, 17, 19, 20, 18, 12, 5, 13], [13, 14, 12, 9, 5, 19, 18, 8, 17, 20], [12, 5, 8, 9, 19, 18, 14, 20, 13, 17], [14, 17, 5, 13, 19, 18, 12, 20, 8, 9], [5, 12, 18, 9, 17, 14, 20, 13, 8, 19], [13, 12, 14, 9, 8, 18, 19, 20, 17, 5], [14, 5, 17, 20, 18, 8, 12, 9, 19, 13], [20, 9, 13, 18, 12, 14, 19, 5, 8, 17], [5, 9, 17, 8, 19, 12, 20, 13, 18, 14], [5, 19, 14, 18, 8, 9, 13, 17, 12, 20], [9, 12, 19, 5, 14, 20, 17, 8, 13, 18], [14, 20, 13, 9, 12, 5, 19, 8, 18, 17], [17, 18, 12, 14, 19, 5, 8, 20, 9, 13], [18, 17, 12, 20, 13, 5, 19, 8, 14, 9], [20, 5, 12, 8, 13, 14, 18, 9, 17, 19], [14, 20, 19, 9, 17, 5, 12, 18, 13, 8], [8, 12, 19, 20, 18, 14, 9, 5, 13, 17], [13, 14, 19, 8, 12, 20, 5, 17, 9, 18], [19, 12, 17, 9, 20, 8, 14, 5, 18, 13], [9, 13, 8, 20, 18, 19, 5, 12, 17, 14], [5, 14, 9, 17, 12, 19, 20, 8, 13, 18], [19, 14, 5, 8, 13, 20, 12, 17, 18, 9], [20, 8, 5, 14, 18, 17, 9, 13, 19, 12], [14, 12, 8, 9, 19, 5, 17, 13, 20, 18], [8, 19, 17, 14, 5, 20, 18, 13, 12, 9], [12, 18, 17, 19, 13, 9, 8, 5, 14, 20], [17, 14, 12, 19, 8, 13, 18, 20, 5, 9], [19, 8, 5, 12, 18, 13, 14, 17, 9, 20], [17, 5, 9, 19, 14, 8, 12, 13, 20, 18], [17, 12, 19, 8, 20, 18, 14, 13, 5, 9], [9, 12, 18, 20, 13, 19, 8, 17, 5, 14], [8, 20, 9, 12, 14, 19, 18, 13, 17, 5], [14, 5, 19, 20, 9, 13, 17, 8, 18, 12], [17, 12, 5, 19, 9, 8, 13, 18, 14, 20], [17, 5, 12, 14, 8, 13, 9, 18, 19, 20], [18, 8, 9, 20, 12, 5, 14, 13, 17, 19], [19, 17, 14, 8, 9, 5, 13, 20, 18, 12]
]:
*/

/*
// SL7^U
ll0:=[[5,8,9,12,13,14,17,18,19,20,23,24,25,26,27],[5,9,8,13,12,14,18,17,19,20,23,24,26,25,27]]:
*/

/*
// SL8^U
ll0:=[[5,8,9,12,13,14,17,18,19,20,23,24,25,26,27,30,31,32,33,34,35],[5,9,8,13,12,14,18,17,19,20,23,24,26,25,27,30,31,32,33,34,35]]:
*/


/*
// SL9^U
ll0:=[[5,8,9,12,13,14,17,18,19,20,23,24,25,26,27,30,31,32,33,34,35,38,39,40,41,42,43,44],[5,9,8,13,12,14,18,17,19,20,23,24,26,25,27,30,31,32,33,34,35,38,39,40,41,42,43,44]]:
*/

/*
// SL10^U
ll0:=[[5,8,9,12,13,14,17,18,19,20,23,24,25,26,27,30,31,32,33,34,35,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54],[5,9,8,13,12,14,18,17,19,20,23,24,26,25,27,30,31,32,33,34,35,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54]]:
*/


// SL5^U
ll0:=[[5,8,9,12,13,14],[5,9,8,13,12,14]]:

maxColumn:=3;  // collect only cluster variables with columns less or equal to 3
b1:=[]:     // cluster variables are stored in b1

for iiiiii from 1 to 23 do // 23 change be changed

for ll in ll0 do

ll1:=removeDuplicates(ll);
ll1:=RandomPermutation(ll1);

for j1 from 1 to 1 do

mutationSequence := ll; 

for j from 1 to lengthOfList(mutationSequence) do 

//print("j",j);

temp:=vertices1[2];

vertices1 := computeEquationsForModulesTableauxSLkU(vertices1, mat1, mutationSequence[j]); 
mat1 := matrixMutation(mat1, mutationSequence[j]): 

//print(vertices1);

if linalg::matdim(vertices1[2][lengthOfList(vertices1[2])])[2]>maxColumn then
vertices1 := computeEquationsForModulesTableauxSLkU(vertices1, mat1, mutationSequence[j]); 
mat1 := matrixMutation(mat1, mutationSequence[j]): 
vertices1[2]:=removeAnElementInList(lengthOfList(vertices1[2]), vertices1[2]);
else if temp<>vertices1[2] and IsInList(vertices1[2][lengthOfList(vertices1[2])], b1)=0 and linalg::matdim(vertices1[2][lengthOfList(vertices1[2])])[2]<=maxColumn then
b1:=append(b1,vertices1[2][lengthOfList(vertices1[2])]);
end_if;
end_if;

end_for:
end_for:

print("len(b1)", lengthOfList(b1));

end_for:
end_for:
